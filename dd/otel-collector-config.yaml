apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: datadog
data:
  config.yaml: |
    receivers:
      # 트레이스 수집
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Kubernetes 메트릭 수집
      k8s_cluster:
        collection_interval: 10s
        node_conditions_to_report: [Ready, MemoryPressure, DiskPressure, PIDPressure]
        allocatable_types_to_report: [cpu, memory, storage, ephemeral-storage]
      
      # 컨테이너 메트릭
      kubeletstats:
        collection_interval: 20s
        auth_type: serviceAccount
        endpoint: "${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
        
      # 호스트 메트릭
      hostmetrics:
        collection_interval: 30s
        scrapers:
          cpu: {}
          disk: {}
          load: {}
          filesystem: {}
          memory: {}
          network: {}
          process: {}
      
      # Prometheus 메트릭 스크래핑
      prometheus:
        config:
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
    
      # 로그 수집
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        exclude:
          - /var/log/pods/*/otel-collector-*/*.log
          - /var/log/pods/*/datadog-*/*.log
        start_at: end
        include_file_path: true
        operators:
          - type: json_parser
            id: parser-json
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z'
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            output: add_source_metadata
          - type: add
            id: add_source_metadata
            field: resource["k8s.namespace.name"]
            value: EXPR(attributes.namespace)
          - type: add
            field: resource["k8s.pod.name"]
            value: EXPR(attributes.pod_name)
          - type: add
            field: resource["k8s.container.name"]
            value: EXPR(attributes.container_name)

    processors:
      # 배치 처리
      batch:
        timeout: 10s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      # 메모리 리미터
      memory_limiter:
        check_interval: 1s
        limit_mib: 512
      
      # 리소스 감지
      resourcedetection:
        detectors: [env, system, k8snode, k8spod]
        timeout: 2s
        override: false
      
      # Kubernetes 속성 추가
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.pod.start_time
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
      
      # 메트릭 변환
      metricstransform:
        transforms:
          - include: ".*"
            match_type: regexp
            action: update
            operations:
              - action: add_label
                new_label: env
                new_value: production

    exporters:
      # Datadog 트레이스 Exporter
      datadog:
        api:
          site: ap1.datadoghq.com
          key: "${env:DD_API_KEY}"
        
        traces:
          span_name_remappings:
            http.method: operation
          span_name_as_resource_name: true
          compute_stats_by_span_kind: true
        
        metrics:
          # 델타 메트릭 사용
          delta_ttl: 3600
          resource_attributes_as_tags: true
          
        logs:
          use_compression: true
      
      # Datadog 메트릭 별도 Exporter (더 나은 메트릭 처리)
      datadog/metrics:
        api:
          site: ap1.datadoghq.com
          key: "${env:DD_API_KEY}"
        metrics:
          summaries:
            mode: distributions
          histograms:
            mode: distributions
          resource_attributes_as_tags: true
      
      # 디버깅용 로깅
      logging:
        loglevel: info
      
      # Prometheus 메트릭 내보내기 (선택사항)
      prometheus:
        endpoint: "0.0.0.0:8889"

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        # 트레이스 파이프라인
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resourcedetection, k8sattributes, batch]
          exporters: [datadog, logging]
        
        # 메트릭 파이프라인
        metrics:
          receivers: [otlp, k8s_cluster, kubeletstats, hostmetrics, prometheus]
          processors: [memory_limiter, resourcedetection, k8sattributes, metricstransform, batch]
          exporters: [datadog/metrics, prometheus, logging]
        
        # 로그 파이프라인
        logs:
          receivers: [otlp, filelog]
          processors: [memory_limiter, resourcedetection, k8sattributes, batch]
          exporters: [datadog, logging]
      
      telemetry:
        metrics:
          address: 0.0.0.0:8888 